title: Election
on-arrival: {!
// Normalize voting within each unit of every demographic
for (var demographic of Q.demographics) {
    var units = Q[demographic];
    for (var unit of units) {
        var total_votes = 0;
        for (var party of Q.parties) {
            if (Q[unit + '_' + party] < 0) {
                Q[unit + '_' + party] = 0;
            }
            total_votes += Q[unit + '_' + party] * Q[party + '_turnout'];
        }
        for (var party of Q.parties) {
            if (total_votes > 0) {
                Q[unit + '_' + party + '_normalized'] = 100 * Q[unit + '_' + party] * Q[party + '_turnout'] / total_votes;
                Q[unit + '_' + party + '_display'] = Math.round(100 * Q[unit + '_' + party] * Q[party + '_turnout'] / total_votes);
            } else {
                Q[unit + '_' + party + '_normalized'] = 0;
                Q[unit + '_' + party + '_display'] = 0;
            }
        }
    }
}

// Calculate party support from all demographics
var total_support = 0;
for (var party of Q.parties) {
    var party_support = 0;

    for (var demographic of Q.demographics) {
        var units = Q[demographic];
        var weight = Q[demographic + '_weight'];

        for (var unit of units) {
            if (Q.old_demographics) {
                // Unnormalized values with turnout, simulating "spillover"
                party_support += Q[unit] * Q[unit + '_' + party] * Q[party + '_turnout'] * weight;
            } else {
                // Normalized values with turnout
                party_support += Q[unit] * Q[unit + '_' + party + '_normalized'] * weight * Q[party + '_turnout'];
            }
        }
    }

    Q[party + '_support'] = party_support;
    total_support += party_support;
}

// Normalize support to fractions and calculate votes
for (var party of Q.parties) {
    Q[party + '_normalized'] = Q[party + '_support'] / total_support;

    Q[party + '_votes_dec'] = Math.round(Q[party + '_normalized'] * 1000) / 10;

    if (Q.use_decimals) {
        Q[party + '_votes'] = Q[party + '_votes_dec'];
        Q[party + '_votes_disp'] = Q[party + '_votes'];
    } else {
        Q[party + '_votes'] = Math.round(Q[party + '_normalized'] * 100);
        Q[party + '_votes_disp'] = Q[party + '_votes_dec'].toFixed(1);
    }
}

Q.prussia_workers = Q.workers*1;
Q.prussia_new_middle = Q.new_middle*1.25;
Q.prussia_old_middle = Q.old_middle*1.05;
Q.prussia_unemployed = Q.unemployed*0.85;
Q.prussia_rural = Q.rural*0.85;
Q.prussia_catholics = Q.catholics*0.7;

Q.bavaria_workers = Q.workers*0.75;
Q.bavaria_new_middle = Q.new_middle*0.6;
Q.bavaria_old_middle = Q.old_middle*1;
Q.bavaria_unemployed = Q.unemployed*0.9;
Q.bavaria_rural = Q.rural*1.3;
Q.bavaria_catholics = Q.catholics*1.5;

Q.thuringia_workers = Q.workers*1.1;
Q.thuringia_new_middle = Q.new_middle*0.75;
Q.thuringia_old_middle = Q.old_middle*1.2;
Q.thuringia_unemployed = Q.unemployed*1.2;
Q.thuringia_rural = Q.rural*1;
Q.thuringia_catholics = Q.catholics*0.2;

Q.saxony_workers = Q.workers*1.1;
Q.saxony_new_middle = Q.new_middle*0.6;
Q.saxony_old_middle = Q.old_middle*1.8;
Q.saxony_unemployed = Q.unemployed*1;
Q.saxony_rural = Q.rural*0.6;
Q.saxony_catholics = Q.catholics*0.1;

Q.schaumburg_lippe_workers = Q.workers*1.9;
Q.schaumburg_lippe_new_middle = Q.new_middle*0.7;
Q.schaumburg_lippe_old_middle = Q.old_middle*3.5;
Q.schaumburg_lippe_unemployed = Q.unemployed*0.7;
Q.schaumburg_lippe_rural = Q.rural*0.6;
Q.schaumburg_lippe_catholics = Q.catholics*0.05;

Q.hamburg_workers = Q.workers*1.05;
Q.hamburg_new_middle = Q.new_middle*1.5;
Q.hamburg_old_middle = Q.old_middle*1.5;
Q.hamburg_unemployed = Q.unemployed*1.1;
Q.hamburg_rural = Q.rural*0.5;
Q.hamburg_catholics = Q.catholics*0.1;

Q.wurttemberg_workers = Q.workers*0.8;
Q.wurttemberg_new_middle = Q.new_middle*1.05;
Q.wurttemberg_old_middle = Q.old_middle*1.15;
Q.wurttemberg_unemployed = Q.unemployed*0.9;
Q.wurttemberg_rural = Q.rural*1.1;
Q.wurttemberg_catholics = Q.catholics*1.5;

!}
go-to: jumpScene

# note: this is a helpful utility to deal with elections and so on.
